---
- name: Fail if the task is missing required parameters
  fail:
    msg: "Could not find required parameters for task"
  when:
    - _task.site | default('') == ''
    - _task.env | default('') == ''
    - _task.commands | default([]) | length < 1

- debug: var=_task
  when:
    - pantheon_cron.debug | default(false) == true

- name: Check if the site configuration exists
  fail:
    msg: "Could not find site configuration {{ _task.site }}"
  when:
    - pantheon_cron.sites[_task.site] is not defined

- name: Get the site configuration
  set_fact:
    _site: "{{ pantheon_cron.sites[_task.site] }}"

- name: Check if the machine token is specified
  fail:
    msg: "Could not find Pantheon machine token for {{ _task.site }}"
  when:
    - _site.machineTokenFile is not defined
    - _site.machineToken is not defined
    
- name: Check if the ssh keys are provided
  fail:
    msg: "Could not find SSH keys for {{ _task.site }}"
  when:
    - (_site.keyFile is not defined) or (_site.pubKeyFile is not defined)

- name: Check if the site_id is provided
  fail:
    msg: "Could not find site_id for {{ _task.site }}"
  when:
    - _site.site_id is not defined
    
- name: Authenticate with Pantheon
  shell: >
    terminus auth:login
    --machine-token={{ _auth }}
    {% if (pantheon_cron.debug | default(false)) != true %}
    --quiet
    {% elif lookup('env', 'ANSIBLE_VERBOSITY') == 4 %}
    -vvv
    {% endif %}
    --no-interaction
    --yes
  register: _pantheon_login_result
  until: _pantheon_login_result.rc == 0
  retries: "{{ _site.retryCount | default(3) }}"
  delay: "{{ _site.retryDelay | default(30) }}"
  vars:
    _auth: "\
      {% if _site.machineTokenFile is defined %}\
      {{ lookup('file', _site.machineTokenFile) }}\
      {% else %}\
      {{ _site.machineToken }}\
      {% endif %}"

- name: Run commands
  include_tasks: "command.yml"
  loop: "{{ _task.commands }}"
  loop_control:
    extended: yes
    label: "{{ _command.name | default(ansible_loop.index0) }}"
    loop_var: _command
  when:
    - _command.command is defined
    - _command.arg is defined
    - _command.disabled | default(false) != true


